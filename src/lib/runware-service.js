// ----------------------------------------------------------------------

import { createClient } from '@supabase/supabase-js';

import { CONFIG } from 'src/global-config';

/**
 * Service ƒë·ªÉ t√≠ch h·ª£p v·ªõi Runware API th√¥ng qua Next.js API routes
 * B·∫£o m·∫≠t API key ·ªü ph√≠a server
 */
export class RunwareService {
  static API_BASE_URL = '/api/runware';

  // Initialize Supabase client
  static supabase = createClient(CONFIG.supabase.url, CONFIG.supabase.key);

  // Error tracking ƒë·ªÉ tr√°nh spam logs
  static errorTracker = new Map();

  /**
   * Log error m·ªôt c√°ch th√¥ng minh, tr√°nh spam
   * @param {string} operation - T√™n operation
   * @param {string} errorKey - Key ƒë·ªÉ track error
   * @param {Object} errorData - D·ªØ li·ªáu error
   */
  static logError(operation, errorKey, errorData) {
    const now = Date.now();
    const lastLogged = this.errorTracker.get(errorKey);

    // Ch·ªâ log n·∫øu ch∆∞a log trong 30 gi√¢y qua
    if (!lastLogged || now - lastLogged > 30000) {
      console.error(`‚ùå [${operation}] ${errorKey}:`, errorData);
      this.errorTracker.set(errorKey, now);
    }
  }

  /**
   * Log success m·ªôt c√°ch t√≥m t·∫Øt
   * @param {string} operation - T√™n operation
   * @param {Object} data - D·ªØ li·ªáu success
   */
  static logSuccess(operation, data) {
    console.log(`‚úÖ [${operation}] Success:`, data);
  }

  /**
   * Log request start
   * @param {string} operation - T√™n operation
   * @param {Object} data - D·ªØ li·ªáu request
   */
  static logRequestStart(operation, data) {
    console.log(`üîß [${operation}] Request initiated:`, {
      ...data,
      timestamp: new Date().toISOString(),
    });
  }

  /**
   * T·∫°o error message th√¥ng minh d·ª±a tr√™n HTTP status code
   * @param {number} status - HTTP status code
   * @param {Object} errorData - Error data t·ª´ response
   * @returns {Object} - Error details
   */
  static createErrorDetails(status, errorData = {}) {
    // Handle server errors (5xx)
    if (status >= 500) {
      return {
        message: 'L·ªói server - Vui l√≤ng th·ª≠ l·∫°i sau',
        type: 'SERVER_ERROR',
        details: 'Internal server error',
        status,
      };
    }

    const errorMap = {
      400: {
        message: 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - Ki·ªÉm tra l·∫°i tham s·ªë ƒë·∫ßu v√†o',
        type: 'VALIDATION_ERROR',
        details: errorData.message || errorData.error || 'Invalid request parameters',
      },
      401: {
        message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p - Ki·ªÉm tra API key',
        type: 'AUTH_ERROR',
        details: 'Unauthorized access',
      },
      403: {
        message: 'B·ªã t·ª´ ch·ªëi truy c·∫≠p - T√†i kho·∫£n c√≥ th·ªÉ b·ªã gi·ªõi h·∫°n',
        type: 'FORBIDDEN_ERROR',
        details: errorData.message || 'Access forbidden',
      },
      404: {
        message: 'API endpoint kh√¥ng t·ªìn t·∫°i',
        type: 'ENDPOINT_ERROR',
        details: 'API endpoint not found',
        solution: 'Ki·ªÉm tra file src/app/api/runware/route.js',
      },
      429: {
        message: 'Qu√° nhi·ªÅu y√™u c·∫ßu - Vui l√≤ng th·ª≠ l·∫°i sau',
        type: 'RATE_LIMIT_ERROR',
        details: 'Rate limit exceeded',
      },
    };

    return (
      errorMap[status] || {
        message: `L·ªói HTTP ${status}`,
        type: 'HTTP_ERROR',
        details: errorData.message || errorData.error || 'Unknown error',
        status,
      }
    );
  }

  /**
   * T·∫°o UUID v4 cho task
   * @returns {string} UUID v4
   */
  static generateUUID() {
    // Use crypto.randomUUID() if available, fallback to manual generation
    if (typeof crypto !== 'undefined' && crypto.randomUUID) {
      return crypto.randomUUID();
    }

    // Fallback for environments without crypto.randomUUID()
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function generateUUIDChar(c) {
      const r = Math.floor(Math.random() * 16);
      const v = c === 'x' ? r : (r & 0x3) | 0x8; // eslint-disable-line no-bitwise
      return v.toString(16);
    });
  }

  /**
   * L·∫•y access token t·ª´ Supabase session
   * @returns {Promise<string|null>} Access token
   */
  static async getAccessToken() {
    try {
      const {
        data: { session },
      } = await this.supabase.auth.getSession();
      return session?.access_token || null;
    } catch (error) {
      console.error('Error getting access token:', error);
      return null;
    }
  }

  /**
   * T·∫°o headers cho API request
   * @returns {Promise<Object>} Headers object
   */
  static async createHeaders() {
    const token = await this.getAccessToken();
    if (!token) {
      throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y');
    }

    return {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    };
  }

  /**
   * T·∫°o mask t·ª´ h√¨nh ·∫£nh (thay v√¨ x√≥a background)
   * @param {string} inputImage - URL ho·∫∑c base64 c·ªßa h√¨nh ·∫£nh
   * @param {Object} options - T√πy ch·ªçn x·ª≠ l√Ω
   * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω
   */
  static async removeBackground(inputImage, options = {}) {
    try {
      if (!inputImage) {
        throw new Error('H√¨nh ·∫£nh ƒë·∫ßu v√†o l√† b·∫Øt bu·ªôc');
      }

      const startTime = Date.now();

      this.logRequestStart('REMOVE_BG', {
        model: options.model || 'runware:109@1',
        hasInputImage: !!inputImage,
        outputFormat: options.outputFormat || 'PNG',
        outputQuality: options.outputQuality || 95,
        returnOnlyMask: options.settings?.returnOnlyMask || true,
      });

      const headers = await this.createHeaders();

      // Optimized settings for mask generation with runware:109@1 model
      const settings = {
        returnOnlyMask: true, // Tr·∫£ v·ªÅ mask thay v√¨ ·∫£nh ƒë√£ x√≥a background
        postProcessMask: true, // C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng mask
        alphaMatting: true, // S·ª≠ d·ª•ng alpha matting ƒë·ªÉ l√†m m·ªãn edges
        alphaMattingForegroundThreshold: 240, // Threshold cho foreground (cao h∆°n = ch√≠nh x√°c h∆°n)
        alphaMattingBackgroundThreshold: 15, // Threshold cho background (th·∫•p h∆°n = √≠t t√≠nh to√°n h∆°n)
        alphaMattingErodeSize: 8, // K√≠ch th∆∞·ªõc erosion ƒë·ªÉ l√†m m·ªãn edges
        rgba: [255, 255, 255, 0], // M√†u background trong su·ªët
        ...options.settings, // Cho ph√©p override settings n·∫øu c·∫ßn
      };

      const requestPayload = {
        operation: 'removeBackground',
        data: { inputImage },
        options: {
          model: 'runware:109@1', // B·∫Øt bu·ªôc s·ª≠ d·ª•ng model n√†y ƒë·ªÉ c√≥ returnOnlyMask
          outputFormat: options.outputFormat || 'PNG',
          outputType: options.outputType || 'URL',
          outputQuality: options.outputQuality || 95,
          settings, // Truy·ªÅn settings object
        },
      };

      const response = await fetch(this.API_BASE_URL, {
        method: 'POST',
        headers,
        body: JSON.stringify(requestPayload),
      });

      console.log(
        `üì° [REMOVE_BG] Response: ${response.status} ${response.statusText} (${Date.now() - startTime}ms)`
      );

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));

        // T·∫°o error message d·ª±a tr√™n status code
        let errorMessage = '';
        let errorDetails = {};

        switch (response.status) {
          case 400:
            errorMessage = 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - Ki·ªÉm tra l·∫°i h√¨nh ·∫£nh ƒë·∫ßu v√†o';
            errorDetails = {
              type: 'VALIDATION_ERROR',
              status: response.status,
              details: errorData.message || errorData.error || 'Invalid image or parameters',
            };
            break;
          case 401:
            errorMessage = 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p - Ki·ªÉm tra API key';
            errorDetails = {
              type: 'AUTH_ERROR',
              status: response.status,
              details: 'Unauthorized access',
            };
            break;
          case 404:
            errorMessage = 'API endpoint kh√¥ng t·ªìn t·∫°i';
            errorDetails = {
              type: 'ENDPOINT_ERROR',
              status: response.status,
              details: 'API endpoint /api/runware not found',
              solution: 'Ki·ªÉm tra file src/app/api/runware/route.js',
            };
            break;
          case 429:
            errorMessage = 'Qu√° nhi·ªÅu y√™u c·∫ßu - Vui l√≤ng th·ª≠ l·∫°i sau';
            errorDetails = {
              type: 'RATE_LIMIT_ERROR',
              status: response.status,
              details: 'Rate limit exceeded',
            };
            break;
          case 500:
          case 502:
          case 503:
          case 504:
            errorMessage = 'L·ªói server - Vui l√≤ng th·ª≠ l·∫°i sau';
            errorDetails = {
              type: 'SERVER_ERROR',
              status: response.status,
              details: 'Internal server error',
            };
            break;
          default:
            errorMessage = `L·ªói HTTP ${response.status} - ${response.statusText}`;
            errorDetails = {
              type: 'HTTP_ERROR',
              status: response.status,
              details: errorData.message || errorData.error || response.statusText,
            };
        }

        this.logError('REMOVE_BG', `API_ERROR_${response.status}`, errorDetails);
        throw new Error(errorMessage);
      }

      const result = await response.json();

      this.logSuccess('REMOVE_BG', {
        hasData: !!result.data,
        hasImageURL: !!result.data?.imageURL,
        cost: result.data?.cost || 0,
        processingTime: `${Date.now() - startTime}ms`,
      });

      // Validate response data
      if (!result.success) {
        const serverError = result.error || 'Server tr·∫£ v·ªÅ tr·∫°ng th√°i kh√¥ng th√†nh c√¥ng';
        this.logError('REMOVE_BG', 'SERVER_ERROR', serverError);
        throw new Error(`Server Error: ${serverError}`);
      }

      if (!result.data) {
        this.logError('REMOVE_BG', 'NO_DATA', 'Response kh√¥ng ch·ª©a d·ªØ li·ªáu');
        throw new Error('Response kh√¥ng ch·ª©a d·ªØ li·ªáu h√¨nh ·∫£nh');
      }

      if (!result.data.imageURL) {
        this.logError('REMOVE_BG', 'NO_IMAGE_URL', 'Response kh√¥ng ch·ª©a URL h√¨nh ·∫£nh');
        throw new Error('Kh√¥ng th·ªÉ l·∫•y URL h√¨nh ·∫£nh t·ª´ server');
      }

      return {
        success: true,
        data: {
          ...result.data,
          // Ensure consistent field naming for backward compatibility
          imageUrl: result.data.imageURL,
          maskURL: result.data.imageURL, // Alias cho mask URL ƒë·ªÉ d√πng trong inpainting
        },
      };
    } catch (error) {
      if (error.name !== 'AbortError') {
        this.logError('REMOVE_BG', 'FINAL_ERROR', {
          message: error.message,
          type: error.constructor.name,
        });
      }

      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * Inpainting - T·∫°o background m·ªõi v·ªõi seedImage v√† maskImage (workflow m·ªõi)
   * @param {string} seedImage - URL ·∫£nh g·ªëc (original image)
   * @param {string} maskImage - URL mask t·ª´ removeBackground
   * @param {string} positivePrompt - Prompt m√¥ t·∫£ background mong mu·ªën
   * @param {Object} options - T√πy ch·ªçn x·ª≠ l√Ω
   * @returns {Promise<Object>} K·∫øt qu·∫£ x·ª≠ l√Ω
   */
  static async inpainting(seedImage, maskImage, positivePrompt, options = {}) {
    try {
      if (!seedImage) {
        throw new Error('Seed image (·∫£nh g·ªëc) l√† b·∫Øt bu·ªôc');
      }

      if (!maskImage) {
        throw new Error('Mask image l√† b·∫Øt bu·ªôc');
      }

      if (!positivePrompt) {
        throw new Error('Positive prompt l√† b·∫Øt bu·ªôc');
      }

      const startTime = Date.now();

      console.log('üîß [INPAINTING] Request initiated:', {
        model: options.model || 'bfl:1@2',
        promptLength: positivePrompt?.length || 0,
        hasSeeedImage: !!seedImage,
        hasMaskImage: !!maskImage,
        CFGScale: options.CFGScale || 60,
        steps: options.steps || 50,
        timestamp: new Date().toISOString(),
      });

      const headers = await this.createHeaders();

      const requestPayload = {
        operation: 'inpainting',
        data: {
          seedImage,
          maskImage,
          positivePrompt,
        },
        options: {
          model: options.model || 'bfl:1@2', // BFL model for high quality
          CFGScale: options.CFGScale || 60,
          steps: options.steps || 50,
          outputType: options.outputType || 'URL',
          outputFormat: options.outputFormat || 'PNG',
          outputQuality: options.outputQuality || 95,
          numberResults: options.numberResults || 1,
          seed: options.seed || 206554476,
          checkNSFW: options.checkNSFW || false,
          includeCost: options.includeCost !== undefined ? options.includeCost : true,
          providerSettings: options.providerSettings || {
            bfl: {
              promptUpsampling: true,
              safetyTolerance: 2,
            },
          },
          // Legacy parameters for backward compatibility
          width: options.width || 1024,
          height: options.height || 1024,
          strength: options.strength || 0.8,
          scheduler: options.scheduler || 'Euler',
          maskMargin: options.maskMargin,
        },
      };

      // Log request summary (kh√¥ng log full payload ƒë·ªÉ tr√°nh spam)
      console.log('üì§ [INPAINTING] Starting request:', {
        model: requestPayload.options?.model || 'unknown',
        promptLength: requestPayload.data?.positivePrompt?.length || 0,
        hasSeeedImage: !!requestPayload.data?.seedImage,
        hasMaskImage: !!requestPayload.data?.maskImage,
        timestamp: new Date().toISOString(),
      });

      const response = await fetch(this.API_BASE_URL, {
        method: 'POST',
        headers,
        body: JSON.stringify(requestPayload),
      });

      // Log response status v·ªõi th√¥ng tin c·∫ßn thi·∫øt
      console.log(
        `üì° [INPAINTING] Response: ${response.status} ${response.statusText} (${Date.now() - startTime}ms)`
      );

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));

        // T·∫°o error message t·ªëi ∆∞u d·ª±a tr√™n status code
        let errorMessage = '';
        let errorDetails = {};

        switch (response.status) {
          case 400:
            errorMessage = 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - Ki·ªÉm tra l·∫°i tham s·ªë ƒë·∫ßu v√†o';
            errorDetails = {
              type: 'VALIDATION_ERROR',
              status: response.status,
              details: errorData.message || errorData.error || 'Invalid request parameters',
            };
            break;
          case 401:
            errorMessage = 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p - Ki·ªÉm tra API key';
            errorDetails = {
              type: 'AUTH_ERROR',
              status: response.status,
              details: 'Unauthorized access',
            };
            break;
          case 403:
            errorMessage = 'B·ªã t·ª´ ch·ªëi truy c·∫≠p - T√†i kho·∫£n c√≥ th·ªÉ b·ªã gi·ªõi h·∫°n';
            errorDetails = {
              type: 'FORBIDDEN_ERROR',
              status: response.status,
              details: errorData.message || 'Access forbidden',
            };
            break;
          case 429:
            errorMessage = 'Qu√° nhi·ªÅu y√™u c·∫ßu - Vui l√≤ng th·ª≠ l·∫°i sau';
            errorDetails = {
              type: 'RATE_LIMIT_ERROR',
              status: response.status,
              details: 'Rate limit exceeded',
              retryAfter: response.headers.get('Retry-After') || 'unknown',
            };
            break;
          case 500:
          case 502:
          case 503:
          case 504:
            errorMessage = 'L·ªói server - Vui l√≤ng th·ª≠ l·∫°i sau';
            errorDetails = {
              type: 'SERVER_ERROR',
              status: response.status,
              details: 'Internal server error',
            };
            break;
          default:
            errorMessage = `L·ªói HTTP ${response.status} - ${response.statusText}`;
            errorDetails = {
              type: 'HTTP_ERROR',
              status: response.status,
              details: errorData.message || errorData.error || response.statusText,
            };
        }

        // Log l·ªói m·ªôt c√°ch c√≥ c·∫•u tr√∫c v√† kh√¥ng spam
        console.error('‚ùå [INPAINTING] API Error:', errorDetails);

        // Ch·ªâ log chi ti·∫øt khi c√≥ l·ªói validation ho·∫∑c c·∫ßn debug
        if (response.status === 400 && errorData.errors) {
          console.error('‚ùå [INPAINTING] Validation Details:', errorData.errors);
        }

        throw new Error(errorMessage);
      }

      const result = await response.json();

      // Log k·∫øt qu·∫£ th√†nh c√¥ng m·ªôt c√°ch t√≥m t·∫Øt
      console.log('‚úÖ [INPAINTING] Success:', {
        hasData: !!result.data,
        hasImageURL: !!result.data?.imageURL,
        cost: result.data?.cost || 0,
        processingTime: `${Date.now() - startTime}ms`,
      });

      // Validate response data v·ªõi error messages r√µ r√†ng
      if (!result.success) {
        const serverError = result.error || 'Server tr·∫£ v·ªÅ tr·∫°ng th√°i kh√¥ng th√†nh c√¥ng';
        console.error('‚ùå [INPAINTING] Server Error:', serverError);
        throw new Error(`Server Error: ${serverError}`);
      }

      if (!result.data) {
        console.error('‚ùå [INPAINTING] No Data:', 'Response kh√¥ng ch·ª©a d·ªØ li·ªáu');
        throw new Error('Response kh√¥ng ch·ª©a d·ªØ li·ªáu h√¨nh ·∫£nh');
      }

      if (!result.data.imageURL) {
        console.error('‚ùå [INPAINTING] No Image URL:', 'Response kh√¥ng ch·ª©a URL h√¨nh ·∫£nh');
        throw new Error('Kh√¥ng th·ªÉ l·∫•y URL h√¨nh ·∫£nh t·ª´ server');
      }

      return {
        success: true,
        data: {
          ...result.data,
          // Ensure consistent field naming for backward compatibility
          imageUrl: result.data.imageURL,
        },
      };
    } catch (error) {
      // Ch·ªâ log error m·ªôt l·∫ßn v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
      if (error.name !== 'AbortError') {
        // Kh√¥ng log timeout errors
        console.error('‚ùå [INPAINTING] Final Error:', {
          message: error.message,
          type: error.constructor.name,
          timestamp: new Date().toISOString(),
        });
      }

      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * T·∫°o ·∫£nh t·ª´ text prompt (Image Generation)
   * @param {string} prompt - Text prompt ƒë·ªÉ t·∫°o ·∫£nh
   * @param {Object} options - T√πy ch·ªçn t·∫°o ·∫£nh
   * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω
   */
  static async generateImage(prompt, options = {}) {
    const startTime = Date.now();

    try {
      if (!prompt) {
        throw new Error('Text prompt l√† b·∫Øt bu·ªôc');
      }

      console.log('üñºÔ∏è [GENERATE_IMAGE] Request initiated:', {
        model: options.model || 'runware:100@1',
        promptLength: prompt.length,
        dimensions: `${options.width || 1024}x${options.height || 1024}`,
        steps: options.steps || 20,
        CFGScale: options.CFGScale || 7.5,
        timestamp: new Date().toISOString(),
      });

      const headers = await this.createHeaders();
      const requestPayload = {
        operation: 'generateImage',
        data: { prompt },
        options: {
          model: options.model || 'runware:100@1',
          width: options.width || 1024,
          height: options.height || 1024,
          steps: options.steps || 20,
          CFGScale: options.CFGScale || 7.5,
          outputFormat: options.outputFormat || 'PNG',
          outputType: options.outputType || 'URL',
          numberResults: options.numberResults || 1,
        },
      };

      const response = await fetch(this.API_BASE_URL, {
        method: 'POST',
        headers,
        body: JSON.stringify(requestPayload),
      });

      console.log(
        `üì° [GENERATE_IMAGE] Response: ${response.status} ${response.statusText} (${Date.now() - startTime}ms)`
      );

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));

        // T·∫°o error message d·ª±a tr√™n status code
        let errorMessage = '';
        switch (response.status) {
          case 400:
            errorMessage = 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - Ki·ªÉm tra l·∫°i prompt v√† tham s·ªë';
            break;
          case 401:
            errorMessage = 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p - Ki·ªÉm tra API key';
            break;
          case 429:
            errorMessage = 'Qu√° nhi·ªÅu y√™u c·∫ßu - Vui l√≤ng th·ª≠ l·∫°i sau';
            break;
          case 500:
          case 502:
          case 503:
          case 504:
            errorMessage = 'L·ªói server - Vui l√≤ng th·ª≠ l·∫°i sau';
            break;
          default:
            errorMessage = `L·ªói HTTP ${response.status} - ${response.statusText}`;
        }

        console.error('‚ùå [GENERATE_IMAGE] API Error:', {
          status: response.status,
          message: errorMessage,
          serverError: errorData.error || errorData.message,
        });

        throw new Error(errorMessage);
      }

      const result = await response.json();

      console.log('‚úÖ [GENERATE_IMAGE] Success:', {
        hasData: !!result.data,
        hasImageURL: !!result.data?.imageURL,
        cost: result.data?.cost || 0,
        processingTime: `${Date.now() - startTime}ms`,
      });

      // Validate response data
      if (!result.success) {
        const serverError = result.error || 'Server tr·∫£ v·ªÅ tr·∫°ng th√°i kh√¥ng th√†nh c√¥ng';
        console.error('‚ùå [GENERATE_IMAGE] Server Error:', serverError);
        throw new Error(`Server Error: ${serverError}`);
      }

      if (!result.data) {
        console.error('‚ùå [GENERATE_IMAGE] No Data:', 'Response kh√¥ng ch·ª©a d·ªØ li·ªáu');
        throw new Error('Response kh√¥ng ch·ª©a d·ªØ li·ªáu h√¨nh ·∫£nh');
      }

      if (!result.data.imageURL) {
        console.error('‚ùå [GENERATE_IMAGE] No Image URL:', 'Response kh√¥ng ch·ª©a URL h√¨nh ·∫£nh');
        throw new Error('Kh√¥ng th·ªÉ l·∫•y URL h√¨nh ·∫£nh t·ª´ server');
      }

      return {
        success: true,
        data: {
          ...result.data,
          // Ensure consistent field naming for backward compatibility
          imageUrl: result.data.imageURL,
        },
      };
    } catch (error) {
      if (error.name !== 'AbortError') {
        console.error('‚ùå [GENERATE_IMAGE] Final Error:', {
          message: error.message,
          type: error.constructor.name,
          timestamp: new Date().toISOString(),
        });
      }

      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * Upscale h√¨nh ·∫£nh
   * @param {string} inputImage - URL ho·∫∑c base64 c·ªßa h√¨nh ·∫£nh
   * @param {Object} options - T√πy ch·ªçn upscale
   * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω
   */
  static async upscaleImage(inputImage, options = {}) {
    try {
      if (!inputImage) {
        throw new Error('H√¨nh ·∫£nh ƒë·∫ßu v√†o l√† b·∫Øt bu·ªôc');
      }

      const headers = await this.createHeaders();

      const response = await fetch(this.API_BASE_URL, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          operation: 'upscale',
          data: { inputImage },
          options: {
            model: options.model || 'runware:109@1',
            scale: options.scale || 2,
            outputFormat: options.outputFormat || 'PNG',
            outputType: options.outputType || 'URL',
          },
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'L·ªói x·ª≠ l√Ω t·ª´ server');
      }

      // Validate response data
      if (!result.data) {
        throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu trong response t·ª´ server');
      }

      // Ensure imageURL is available
      if (!result.data.imageURL) {
        throw new Error('Kh√¥ng c√≥ URL h√¨nh ·∫£nh trong response t·ª´ server');
      }

      return {
        success: true,
        data: {
          ...result.data,
          // Ensure consistent field naming for backward compatibility
          imageUrl: result.data.imageURL,
        },
      };
    } catch (error) {
      console.error('Upscale image error:', error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * T·∫°o background m·ªõi cho h√¨nh ·∫£nh (img2img)
   * @param {string} inputImage - URL c·ªßa h√¨nh ·∫£nh ƒë√£ x√≥a background
   * @param {Object} options - T√πy ch·ªçn t·∫°o background
   * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω
   */
  static async generateBackground(inputImage, options = {}) {
    try {
      if (!inputImage) {
        throw new Error('H√¨nh ·∫£nh ƒë·∫ßu v√†o l√† b·∫Øt bu·ªôc');
      }

      // Optimized parameters based on Runware API best practices
      const {
        prompt = 'professional studio background, clean, minimalist, high quality, detailed',
        negativePrompt = 'blurry, low quality, distorted, artifacts, noise, oversaturated',
        width = 1024,
        height = 1024,
        steps = 25, // Increased for better quality
        CFGScale = 7.0, // Optimal balance between prompt adherence and creativity
        strength = 0.75, // Slightly lower for better integration
        model = 'runware:101@1', // FLUX model for better quality
        scheduler = 'Euler', // Deterministic scheduler for consistent results
        seed = null, // Random seed for variety
        outputFormat = 'PNG',
        outputQuality = 95,
      } = options;

      const headers = await this.createHeaders();

      const requestBody = {
        operation: 'generateImage',
        data: {
          prompt,
          inputImage, // For img2img generation
        },
        options: {
          model,
          width,
          height,
          steps,
          CFGScale,
          strength,
          outputFormat,
          outputType: 'URL',
          outputQuality,
          numberResults: 1,
        },
      };

      // Add optional parameters if provided
      if (negativePrompt) {
        requestBody.data.negativePrompt = negativePrompt;
      }
      if (scheduler) {
        requestBody.options.scheduler = scheduler;
      }
      if (seed !== null) {
        requestBody.options.seed = seed;
      }

      const response = await fetch(this.API_BASE_URL, {
        method: 'POST',
        headers,
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'L·ªói x·ª≠ l√Ω t·ª´ server');
      }

      // Validate response data
      if (!result.data) {
        throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu trong response t·ª´ server');
      }

      // Ensure imageURL is available
      if (!result.data.imageURL) {
        throw new Error('Kh√¥ng c√≥ URL h√¨nh ·∫£nh trong response t·ª´ server');
      }

      return {
        success: true,
        data: {
          ...result.data,
          // Ensure consistent field naming for backward compatibility
          imageUrl: result.data.imageURL,
        },
      };
    } catch (error) {
      console.error('Generate background error:', error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * Convert File/Blob th√†nh base64 string
   * @param {File|Blob} file - File c·∫ßn convert
   * @returns {Promise<string>} - Base64 string
   */
  static fileToBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        // Remove data:image/...;base64, prefix
        const base64 = reader.result.split(',')[1];
        resolve(base64);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  /**
   * Download h√¨nh ·∫£nh t·ª´ URL v√† convert th√†nh Blob
   * @param {string} imageUrl - URL c·ªßa h√¨nh ·∫£nh
   * @returns {Promise<Blob>} - Blob c·ªßa h√¨nh ·∫£nh
   */
  static async downloadImageAsBlob(imageUrl) {
    try {
      const response = await fetch(imageUrl);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const blob = await response.blob();

      if (!blob.type.startsWith('image/')) {
        throw new Error('Response kh√¥ng ph·∫£i l√† h√¨nh ·∫£nh');
      }

      return blob;
    } catch (error) {
      console.error('Download image error:', error);
      throw error;
    }
  }

  /**
   * Retry mechanism cho c√°c API call
   * @param {Function} apiCall - Function API c·∫ßn retry
   * @param {number} maxRetries - S·ªë l·∫ßn retry t·ªëi ƒëa
   * @param {number} delay - Delay gi·ªØa c√°c l·∫ßn retry (ms)
   * @returns {Promise<Object>} - K·∫øt qu·∫£ API call
   */
  static async retryApiCall(apiCall, maxRetries = 3, delay = 1000) {
    let lastError;

    for (let i = 0; i <= maxRetries; i++) {
      try {
        const result = await apiCall();
        if (result.success) {
          return result;
        }
        lastError = new Error(result.error || 'API call failed');
      } catch (error) {
        lastError = error;
      }

      if (i < maxRetries) {
        await new Promise((resolve) => setTimeout(resolve, delay * (i + 1)));
      }
    }

    throw lastError;
  }

  /**
   * Batch processing cho nhi·ªÅu ·∫£nh
   * @param {Array} files - M·∫£ng c√°c file ·∫£nh
   * @param {string} operation - Lo·∫°i operation ('removeBackground', 'upscale', etc.)
   * @param {Object} options - T√πy ch·ªçn cho operation
   * @param {Function} onProgress - Callback ƒë·ªÉ track progress
   * @returns {Promise<Array>} - M·∫£ng k·∫øt qu·∫£
   */
  static async batchProcess(files, operation, options = {}, onProgress = null) {
    try {
      const headers = await this.createHeaders();

      // Convert files to base64 for upload
      const filesData = await Promise.all(
        files.map(async (file, index) => {
          if (operation === 'generateImage') {
            // For text-to-image, file is actually the prompt
            return {
              filename: `generated-${index}.png`,
              prompt: file,
            };
          } else {
            // For other operations, convert file to base64
            const base64 = await this.fileToBase64(file);
            return {
              filename: file.name,
              base64,
            };
          }
        })
      );

      const response = await fetch(`${this.API_BASE_URL}/batch`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          files: filesData,
          operation,
          options,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'L·ªói x·ª≠ l√Ω batch t·ª´ server');
      }

      // Simulate progress updates for UI
      if (onProgress) {
        result.results.forEach((fileResult, index) => {
          onProgress({
            completed: index + 1,
            total: files.length,
            percentage: Math.round(((index + 1) / files.length) * 100),
            currentFile: fileResult.filename,
            result: fileResult,
          });
        });
      }

      return result.results;
    } catch (error) {
      console.error('Batch processing error:', error);
      return files.map((file, index) => ({
        index,
        filename: file.name || `file-${index}`,
        success: false,
        error: error.message,
      }));
    }
  }

  /**
   * Test connection to API
   * @returns {Promise<Object>} - K·∫øt qu·∫£ test
   */
  static async testConnection() {
    try {
      const headers = await this.createHeaders();

      const response = await fetch(this.API_BASE_URL, {
        method: 'GET',
        headers,
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      return result;
    } catch (error) {
      console.error('Test connection error:', error);
      return {
        success: false,
        error: error.message,
      };
    }
  }
}
